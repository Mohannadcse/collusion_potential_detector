#!/usr/bin/env python

import logging
# from acid_detectors.implicit_intents import get_implicit_intents, get_dynamic_receivers, get_static_receivers
# from acid_detectors.shared_preferences import get_shared_preferences_writes, get_shared_preferences_reads
import argparse
# import os
# import sys
# sys.path.append("androguard-acid/")
# import androguard.misc
# import ntpath
from acid_detectors.utils import get_all_directrories_in_dir


__author__ = "jorgeblasco and Liam O'Reilly"
VERSION_NUMBER = "1.1"


def main():
    parser = argparse.ArgumentParser(description="Collusion prolog generator, version %s. Produce the prolog filter program from the previously generated collusion fact directories. Combines the generated collusion fact directories (produced by the generate_facts program) into a prolog filter program." % VERSION_NUMBER)
    parser.add_argument("-v", "--verbose",
                        action="store_true", dest="verbose", default=False,
                        help="increase output verbosity")
    parser.add_argument("-o", "--output_file",
                        action="store", dest="output_file", default="prolog_program.pl",
                        help="set the output file to which the prolog filter program will be written to. Default is 'prolog_program.pl'")
    parser.add_argument("-d", "--input_dir",
                        action="store", dest="input_dir", default=".",
                        help="set the input directory in which the collusion facts directories are located. All directories within this input directory (which start with the specified prefix) will be considered as being collusion fact directories (generated by the generate_facts program). Default is '.'")
    parser.add_argument("-p", "--prefix",
                        action="store", dest="dir_prefix", default="collusion_facts_",
                        help="set directory prefix used to discover the generated collusion fact directtories. All directories with this prefix (located in the input directory) will be considered as being collusion fact directories (generated by the generate_facts program). This should match the prefix that was used when running the generate_facts program. Default is 'collusion_facts_'. Note, this can be set to the empty string ''")
    
    args = parser.parse_args()

    logging_level = logging.WARNING
    if args.verbose:
        logging_level = logging.INFO

    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging_level)

    # Discover the collusion fact directories
    collusion_fact_directories = get_all_directrories_in_dir(args.input_dir, args.dir_prefix)
    
    logging.info("Version " + VERSION_NUMBER)
    logging.info("Collusion fact directories to process: \n\t%s" % str.join("\n\t", collusion_fact_directories))

    if len(collusion_fact_directories) <= 0:
        logging.warning("No collusion fact directories found")
        exit(-1);

    # Not done yet!
    # generate_facts(apk_file_list, args.output_dir, args.output_dir_prefix)

if __name__ == "__main__":
    main()