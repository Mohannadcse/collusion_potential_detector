#!/usr/bin/env python

import logging
# from acid_detectors.implicit_intents import get_implicit_intents, get_dynamic_receivers, get_static_receivers
# from acid_detectors.shared_preferences import get_shared_preferences_writes, get_shared_preferences_reads
import argparse
import os
# import sys
# sys.path.append("androguard-acid/")
# import androguard.misc
# import ntpath
from acid_detectors.utils import get_all_directrories_in_dir


__author__ = "jorgeblasco and Liam O'Reilly"
VERSION_NUMBER = "1.1"

def append_file(opened_output_file, input_filename):
    with open(input_filename, 'r') as input_file:
        for line in input_file:
           opened_output_file.write(line)


def produce_prolog_program(collusion_fact_directories, output_file_name, prolog_rules_filename):
    with open(output_file_name, 'w') as output_file:
        output_file.write("# DO NOT EDIT THIS FILE\n");
        output_file.write("# =====================\n");
        output_file.write("# This file was automatically generated by the generate_facts program.\n");
        output_file.write("\n");

        # write facts: packages
        logging.info("Writing packages")
        for directory in collusion_fact_directories:
            input_filename = os.path.join(directory, "packages.pl.partial")
            append_file(output_file, input_filename)

        # write fact: permissions
        logging.info("Writing uses")
        for directory in collusion_fact_directories:
            input_filename = os.path.join(directory, "uses.pl.partial")
            append_file(output_file, input_filename)

        # write facts: sends
        logging.info("Writing sends")
        for directory in collusion_fact_directories:
            input_filename = os.path.join(directory, "sends.pl.partial")
            append_file(output_file, input_filename)

        # write facts: receivers
        logging.info("Writing receivers")
        for directory in collusion_fact_directories:
            input_filename = os.path.join(directory, "receives.pl.partial")
            append_file(output_file, input_filename)

        # write prolog rules
        logging.info("Writing prolog rules")
        append_file(output_file, prolog_rules_filename)

        logging.info("Done")

# if rules != "":
#         with open(os.path.splitext(os.path.split(rules)[1])[0]+"_program.pl", 'w') as f:
#             #write packages
#             with open(result_prefix+"_packages.txt", 'r') as to_read:
#                 f.writelines(to_read.readlines())
#             #write uses
#             with open(result_prefix+"_uses.txt", 'r') as to_read:
#                 f.writelines(to_read.readlines())
#             #write trans
#             with open(result_prefix+"_trans.txt", 'r') as to_read:
#                 f.writelines(to_read.readlines())
#                 if storage:
#                     f.write("trans(A,'external_storage'):- uses(A,'android.permission.WRITE_EXTERNAL_STORAGE').\n")
#             #write receives
#             with open(result_prefix+"_recv.txt", 'r') as to_read:
#                 f.writelines(to_read.readlines())
#                 if storage:
#                     f.write("recv(A,'external_storage'):- uses(A,'android.permission.WRITE_EXTERNAL_STORAGE').\n")
#                     f.write("recv(A,'external_storage'):- uses(A,'android.permission.READ_EXTERNAL_STORAGE').\n")
#             with open(rules, 'r') as to_read:
#                 f.writelines(to_read.readlines())
#     with open(result_prefix+"_intent_send_stats",'w') as send_stats_file:
#         send_stats_file.write("**** Results for send intent analysis ****\n")
#         send_stats_file.write("Files analized: ")
#         send_stats_file.write(str(len_files))
#         send_stats_file.write("\n")
#         for send_stat in send_intent_actions_stats.most_common():
#             freq = send_stat[1]/len_files
#             send_stats_file.write(send_stat[0]+", "+"{0:.2f}".format(round(freq,2))+", "+str(send_stat[1])+"\n")
#     with open(result_prefix+"_intent_recv_stats",'w') as recv_stats_file:
#         recv_stats_file.write("**** Results for send intent analysis ****\n")
#         recv_stats_file.write("Files analized: ")
#         recv_stats_file.write(str(len_files))
#         recv_stats_file.write("\n")
#         for recv_stat in recv_intent_actions_stats.most_common():
#             freq = recv_stat[1]/len_files
#             recv_stats_file.write(recv_stat[0]+", "+"{0:.2f}".format(round(freq,2))+", "+str(recv_stat[1])+"\n")
#     logging.info("Results saved in %s files",result_prefix)
#     return os.path.splitext(os.path.split(rules)[1])[0]+"_program.pl"


def main():
    default_prolog_rules = os.path.join(os.path.dirname(os.path.realpath(__file__)), "prolog_default_collusion_rules.pl")

    parser = argparse.ArgumentParser(description="Collusion prolog generator, version %s. Produce the prolog filter program from the previously generated collusion fact directories. Combines the generated collusion fact directories (produced by the generate_facts program) into a prolog filter program." % VERSION_NUMBER)
    parser.add_argument("-v", "--verbose",
                        action="store_true", dest="verbose", default=False,
                        help="increase output verbosity")
    parser.add_argument("-o", "--output_file",
                        action="store", dest="output_file", default="prolog_program.pl",
                        help="set the output file to which the prolog filter program will be written to. Any existing file will be overwritten. Default is 'prolog_program.pl'")
    parser.add_argument("-d", "--input_dir",
                        action="store", dest="input_dir", default=".",
                        help="set the input directory in which the collusion facts directories are located. All directories within this input directory (which start with the specified prefix) will be considered as being collusion fact directories (generated by the generate_facts program). Default is '.'")
    parser.add_argument("-p", "--prefix",
                        action="store", dest="dir_prefix", default="collusion_facts_",
                        help="set directory prefix used to discover the generated collusion fact directtories. All directories with this prefix (located in the input directory) will be considered as being collusion fact directories (generated by the generate_facts program). This should match the prefix that was used when running the generate_facts program. Default is 'collusion_facts_'. Note, this can be set to the empty string ''")
    parser.add_argument("-r", "--rules",
                        action="store", dest="prolog_rules_filename", default=default_prolog_rules,
                        help="set the prolog rule file that contains the collusion rules that will be used. The default will be the rules that come packaged as default. Only change this if you know what you are doing.")

    args = parser.parse_args()

    logging_level = logging.WARNING
    if args.verbose:
        logging_level = logging.INFO

    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging_level)

    # Discover the collusion fact directories
    collusion_fact_directories = get_all_directrories_in_dir(args.input_dir, args.dir_prefix)
    
    logging.info("Version " + VERSION_NUMBER)
    logging.info("Collusion fact directories to process: \n\t%s" % str.join("\n\t", collusion_fact_directories))
    logging.info("Prolog collusion rules file: " + args.prolog_rules_filename)

    if len(collusion_fact_directories) <= 0:
        logging.warning("No collusion fact directories found")
        exit(-1);
    
    produce_prolog_program(collusion_fact_directories, args.output_file, args.prolog_rules_filename)

if __name__ == "__main__":
    main()